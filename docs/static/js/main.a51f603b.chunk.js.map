{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","components/GifExpertApp.js","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id_img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","propTypes","PropTypes","func","isRequired","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOA8BeA,EA3BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAerC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAQ,GACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAE1CN,EAAc,KAId,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+CCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC2EC,UAAUH,GADrF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAO,CACHC,OAAQD,EAAIE,GACZC,MAAOH,EAAIG,MACXX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QATvB,kBAYZM,GAZY,4CAAH,sDC2BLQ,EAzBM,SAAEhB,GAAe,IAAD,EAEPd,mBAAS,CAC/BqB,KAAM,GACNU,SAAS,IAJoB,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAoBjC,OAbAC,qBAAU,WACNrB,EAASC,GACRqB,MAAM,SAAAC,GACHH,EAAS,CACLZ,KAAMe,EACNL,SAAQ,SAGjB,CAAEjB,IAKEkB,GCTIK,EAZK,SAAC,GAAyB,EAAxBZ,OAAyB,IAAjBE,EAAgB,EAAhBA,MAAOX,EAAS,EAATA,IAEjC,OACG,sBAAKsB,UAAU,6CAAf,UACI,qBAAKC,IAAKvB,EAAKwB,IAAKb,IACpB,4BAAIA,QCmBAc,EAtBC,SAAC,GAAgB,IAAf3B,EAAc,EAAdA,SAAc,EACKgB,EAAchB,GAAlCc,EADe,EACpBP,KAAaU,EADO,EACPA,QAErB,OACI,qCACA,mCAAMjB,KACJiB,GAAW,2CACb,qBAAKO,UAAU,YAAf,SAEYV,EAAOL,KAAI,SAACC,GACR,OACI,cAAC,EAAD,eAEIA,GADCA,EAAIC,iBCatBiB,EAvBM,WAAO,IAAD,EACa1C,mBAAS,CAAC,cADvB,mBAChB2C,EADgB,KACJ5C,EADI,KAGvB,OACI,gCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YAazBhB,EAAY8C,UAAY,CACpB7C,cAAe8C,IAAUC,KAAKC,YCnBnBC,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCISW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a51f603b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value); \r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length> 2) {\r\n            setCategories(cats => [inputValue, ...cats]); \r\n        }\r\n        setInputValue(''); \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>     \r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddCategory\r\n\r\n","\r\nexport const getGifs = async( category ) => {\r\n    const url=`https://api.giphy.com/v1/gifs/search?api_key=1xBCf2OFVp1IRRiUJujGSDV0EZXqBAqD&q=${ encodeURI(category) }&limit=10`    \r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json(); \r\n\r\n    const gifs = data.map((img)=>{\r\n        return {\r\n            id_img: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })        \r\n    return(gifs); \r\n\r\n}\r\n// export default getGifs  se omite porque se coloco la palabra export en linea 2","import { useEffect, useState } from \"react\"\r\nimport  {getGifs}  from '../helpers/getGifs'; \r\n\r\nconst useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    }); \r\n\r\n    useEffect(()=> {\r\n        getGifs( category )\r\n        .then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading:false\r\n            })\r\n        })\r\n    }, [ category ])\r\n\r\n\r\n\r\n\r\n    return state;\r\n\r\n\r\n}\r\n\r\nexport default useFetchGifs","import React from 'react'\r\n\r\nconst GifGridItem = ({id_img, title, url}) => {\r\n\r\n    return (\r\n       <div className='card animate__animated animate__fadeInDown'>\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n\r\n       </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n    const { data:images, loading } = useFetchGifs( category );\r\n  \r\n    return (\r\n        <>\r\n        <h3> {category }</h3>\r\n        { loading && <p>Loading...</p>  }\r\n        <div className='card-grid'>            \r\n                {\r\n                    images.map((img)=>{\r\n                        return (                            \r\n                            <GifGridItem \r\n                            key={img.id_img}\r\n                            {...img} />\r\n                        )\r\n                    })\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './AddCategory'\r\nimport PropTypes from 'prop-types';\r\nimport GifGrid from './GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n            {\r\n                categories.map(category =>\r\n                    <GifGrid \r\n                    key={category}\r\n                    category={category}/>\r\n                )}\r\n\r\n            {/* <button onClick={addCategory}>+Nuevo</button> */}\r\n\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\nimport './App.css';\n\nimport GifExpertApp from './components/GifExpertApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GifExpertApp/>     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}